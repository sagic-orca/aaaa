# A comprehensive GitHub Actions workflow to build and test Python wheels for multiple
# platforms and architectures using a matrix strategy.
# It supports both manylinux (glibc-based) and musllinux (musl-based) wheels
# on x86_64 and aarch64 architectures.

name: build-all-opengrep-wheels

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # This job runs on the host to prepare the repository and get the latest release tag.
  prepare:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_release.outputs.tag }}
    steps:
      - name: Get latest release tag
        id: get_release
        run: |
          tag=$(curl -s https://api.github.com/repos/opengrep/opengrep/releases/latest | jq -r .tag_name)
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Make checkout speedy
        run: git config --global fetch.parallel 50

      - name: Checkout source at release tag
        # This is a host-based action, which is fine in a separate job.
        uses: actions/checkout@v4
        with:
          submodules: true
          repository: opengrep/opengrep
          ref: ${{ steps.get_release.outputs.tag }}
      
      # Upload the entire checked out repository as a build artifact.
      - name: Upload source as artifact
        uses: actions/upload-artifact@v4
        with:
          name: opengrep-source
          path: .
          
  build-and-test-wheels:
    name: Build & Test ${{ matrix.os_type }}-${{ matrix.arch }}
    # This step runs on the host to ensure compatibility with JavaScript-based actions.
    runs-on: ${{ matrix.arch == 'x86_64' && 'ubuntu-latest' || 'ubuntu-24.04-arm' }}
    needs: prepare
    
    strategy:
      # The build matrix defines all combinations to be run.
      matrix:
        os_type: ["manylinux", "musllinux"]
        arch: ["x86_64", "aarch64"]

    steps:
      - name: Download source artifact
        # This action now runs on the host runner to avoid the container limitation.
        uses: actions/download-artifact@v4
        with:
          name: opengrep-source
          path: .
          
      - name: Install dependencies (jq and zip)
        # These commands will run inside the container.
        run: |
          if [ "${{ matrix.os_type }}" = "manylinux" ]; then
            yum update -y
            yum install -y jq zip
          elif [ "${{ matrix.os_type }}" = "musllinux" ]; then
            apk update
            apk add jq zip
          fi

      - name: Set core arch based on matrix.arch
        # This also runs inside the container.
        env:
          ARCH: ${{ matrix.arch }}
        run: |
          if [ "$ARCH" = "x86_64" ]; then
            echo "CORE_ARCH=x86" >> $GITHUB_ENV
          else
            echo "CORE_ARCH=aarch64" >> $GITHUB_ENV
          fi

      - name: Download release tarball
        run: |
          tag="${{ needs.prepare.outputs.tag }}"
          url="https://github.com/opengrep/opengrep/releases/download/${tag}/opengrep-core_linux_${CORE_ARCH}.tar.gz"
          echo "Downloading $url"
          curl -L "$url" -o "opengrep-core_linux_${CORE_ARCH}.tar.gz"

      - name: Extract tarball
        run: |
          tar -xzf "opengrep-core_linux_${CORE_ARCH}.tar.gz"
          ls -lah

      - name: Install Python and pip
        run: |
          if [ "${{ matrix.os_type }}" = "manylinux" ]; then
            yum install -y python3-pip python3.9
            alternatives --remove-all python3
            alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 1
            alternatives --auto python3
          elif [ "${{ matrix.os_type }}" = "musllinux" ]; then
            apk add python3-pip
          fi

      - name: move opengrep-core to bin directory
        run: |
          mv opengrep-core cli/src/semgrep/bin
          ./scripts/build-wheels.sh

      - name: Test package
        run: |
          # Use a consistent way to run pip, like `python3 -m pip`
          if [ "${{ matrix.os_type }}" = "manylinux" ]; then
            /opt/python/cp39-cp39/bin/pip install --force-reinstall cli/dist/*.whl
            export PATH=/opt/python/cp39-cp39/bin:$PATH
          elif [ "${{ matrix.os_type }}" = "musllinux" ]; then
            python3 -m pip install --force-reinstall cli/dist/*.whl
            export PATH=/usr/bin:$PATH
          fi
          
          echo '1 == 1' | opengrep -l python -e '$X == $X'
          opengrep --version

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os_type }}-${{ matrix.arch }}-wheels
          path: cli/dist.zip
