# A comprehensive GitHub Actions workflow to build and test Python wheels for multiple
# platforms and architectures using a matrix strategy.
# It supports both manylinux (glibc-based) and musllinux (musl-based) wheels
# on x86_64 and aarch64 architectures.

name: build-all-opengrep-wheels

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # This job runs on the host to prepare the repository and get the latest release tag.
  prepare:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_release.outputs.tag }}
    steps:
      - name: Get latest release tag
        id: get_release
        run: |
          tag=$(curl -s https://api.github.com/repos/opengrep/opengrep/releases/latest | jq -r .tag_name)
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Make checkout speedy
        run: git config --global fetch.parallel 50

      - name: Checkout source at release tag
        # This is a host-based action, which is fine in a separate job.
        uses: actions/checkout@v4
        with:
          submodules: true
          repository: opengrep/opengrep
          ref: ${{ steps.get_release.outputs.tag }}
      
      # Upload the entire checked out repository as a build artifact.
      - name: Upload source as artifact
        uses: actions/upload-artifact@v4
        with:
          name: opengrep-source
          path: .
          
  build-and-test-wheels:
    name: Build & Test ${{ matrix.os_type }}-${{ matrix.arch }}
    # This job runs on the host to ensure compatibility with JavaScript-based actions.
    runs-on: ${{ matrix.arch == 'x86_64' && 'ubuntu-latest' || 'ubuntu-24.04-arm' }}
    needs: prepare
    
    strategy:
      # The build matrix defines all combinations to be run.
      fail-fast: false
      matrix:
        os_type: ["manylinux", "musllinux"]
        arch: ["x86_64", "aarch64"]

    steps:
      - name: Download source artifact
        # This action must run on the host runner
        uses: actions/download-artifact@v4
        with:
          name: opengrep-source
          path: .

      - name: Run in ${{ matrix.os_type }}-${{ matrix.arch }} container
        # Use docker run to execute a shell command inside the container.
        run: |
          CONTAINER_IMAGE="${{ matrix.os_type == 'manylinux' && 
                             (matrix.arch == 'x86_64' && 'quay.io/pypa/manylinux_2_28_x86_64' || 'quay.io/pypa/manylinux_2_28_aarch64') ||
                             (matrix.arch == 'x86_64' && 'quay.io/pypa/musllinux_1_2_x86_64' || 'quay.io/pypa/musllinux_1_2_aarch64') }}"

          # Set CORE_ARCH variable based on the matrix architecture
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            CORE_ARCH="x86"
          else
            CORE_ARCH="aarch64"
          fi

          # Use a heredoc to create a shell script and pipe it to docker run, passing variables with -e
          docker run --rm \
            -v "$(pwd):/github/workspace" \
            -w /github/workspace \
            -e "TAG=${{ needs.prepare.outputs.tag }}" \
            -e "CORE_ARCH=${CORE_ARCH}" \
            -e "OS_TYPE=${{ matrix.os_type }}" \
            "$CONTAINER_IMAGE" sh -c "
            set -e

            # Install dependencies
            echo \"Installing dependencies for \$OS_TYPE on \$CORE_ARCH\"
            if [ \"\$OS_TYPE\" = \"manylinux\" ]; then
              yum update -y
              yum install -y jq zip python3-pip python3.9
              echo \"Upgrading pip for manylinux\"
              /opt/python/cp39-cp39/bin/pip install --upgrade pip
              /opt/python/cp39-cp39/bin/pip install --upgrade setuptools wheel twine
            elif [ \"\$OS_TYPE\" = \"musllinux\" ]; then
              apk update
              apk add jq zip python3-dev py3-pip
              echo \"Upgrading pip for musllinux with --break-system-packages\"
              python3 -m pip install --upgrade pip --break-system-packages
              python3 -m pip install --upgrade setuptools wheel twine --break-system-packages
            fi

            # Download release tarball
            echo \"Downloading opengrep-core release\"
            url=\"https://github.com/opengrep/opengrep/releases/download/\$TAG/opengrep-core_linux_\$CORE_ARCH.tar.gz\"
            echo \"Downloading from URL: \$url\"
            curl -L -f \"\$url\" -o \"opengrep-core_linux_\$CORE_ARCH.tar.gz\"

            # Extract tarball
            echo \"Extracting tarball\"
            tar -xzf \"opengrep-core_linux_\$CORE_ARCH.tar.gz\"
            ls -lah

            # Create the necessary directory before moving the file
            mkdir -p cli/src/semgrep/bin
            
            # Find and move opengrep-core to bin directory and fix permissions
            echo \"Moving opengrep-core to cli/src/semgrep/bin\"
            # Use a more robust approach to move the file, avoiding 'same file' errors
            if [ ! -f cli/src/semgrep/bin/opengrep-core ]; then
              find . -type f -name 'opengrep-core' ! -path './cli/src/semgrep/bin/*' -exec mv {} cli/src/semgrep/bin/ \;
            else
              echo \"opengrep-core already exists in destination, skipping move\"
            fi
            ls -la cli/src/semgrep/bin/
            
            # Create the .semgrepignore file with the specified content
            echo \"Creating .semgrepignore file\"
            echo '# Items added to this file will be ignored by Semgrep.' > .semgrepignore
            echo '#' >> .semgrepignore
            echo '# This file uses .gitignore syntax:' >> .semgrepignore
            echo '#' >> .semgrepignore
            echo '# To ignore a file anywhere it occurs in your project, enter a' >> .semgrepignore
            echo '# glob pattern here. E.g. \"*.min.js\".' >> .semgrepignore
            echo '#' >> .semgrepignore
            echo '# To ignore a directory anywhere it occurs in your project, add' >> .semgrepignore
            echo '# a trailing slash to the file name. E.g. \"dist/\".' >> .semgrepignore
            echo '#' >> .semgrepignore
            echo '# To ignore a file or directory only relative to the project root,' >> .semgrepignore
            echo '# include a slash anywhere except the last character. E.g.' >> .semgrepignore
            echo '# \"/dist/\", or \"src/generated\".' >> .semgrepignore
            echo '#' >> .semgrepignore
            echo '# Some parts of .gitignore syntax are not supported, and patterns' >> .semgrepignore
            echo '# using this syntax will be dropped from the ignore list:' >> .semgrepignore
            echo '# - Explicit \"include syntax\", e.g. \"!kept/\".' >> .semgrepignore
            echo '# - Multi-character expansion syntax, e.g. \"*.py[cod]\"' >> .semgrepignore
            echo '# To include ignore patterns from another file, start a line' >> .semgrepignore
            echo '# with \":include\", followed by the path of the file. E.g.' >> .semgrepignore
            echo '# \":include path/to/other/ignore/file\".' >> .semgrepignore
            echo '# UPDATE: this will not be be needed in osemgrep which supports' >> .semgrepignore
            echo '# all of the .gitignore syntax (!kept/, *.py[cod])' >> .semgrepignore
            echo '#' >> .semgrepignore
            echo '# To ignore a file with a literal \":\" character, escape it with' >> .semgrepignore
            echo '# a backslash, e.g. \"\\:foo\".' >> .semgrepignore
            echo '' >> .semgrepignore
            echo '# Test data' >> .semgrepignore
            echo '/tests' >> .semgrepignore
            echo '/cli/tests/default/e2e/targets/' >> .semgrepignore
            echo '/cli/tests/default/e2e/snapshots/' >> .semgrepignore
            echo '/cli/tests/performance/targets/' >> .semgrepignore
            echo '# This generates lots of timeout for osemgrep ci so better to skip' >> .semgrepignore
            echo '/cli/tests/performance/targets_perf_sca/' >> .semgrepignore
            echo '/cli/tests/default/e2e/rules/long_message.yaml' >> .semgrepignore
            echo '' >> .semgrepignore
            echo '# has some constructs that AST_to_IL has trouble translating' >> .semgrepignore
            echo '/cli/stubs/' >> .semgrepignore
            echo '*.pyi' >> .semgrepignore
            echo '' >> .semgrepignore
            echo '# rules being tested for performance' >> .semgrepignore
            echo '/perf/rules/' >> .semgrepignore
            echo '/perf/r2c-rules/' >> .semgrepignore
            echo '' >> .semgrepignore
            echo '# fixpoint is sometimes timing out on this file' >> .semgrepignore
            echo '/src/data/Entropy_data.ml' >> .semgrepignore

            # The build will proceed without the .semgrepignore file

            # Execute build commands directly from the build script
            echo \"Building wheel package\"
            if [ \"\$OS_TYPE\" = \"manylinux\" ]; then
              cd cli && /opt/python/cp39-cp39/bin/python3 setup.py sdist bdist_wheel
            elif [ \"\$OS_TYPE\" = \"musllinux\" ]; then
              cd cli && python3 setup.py sdist bdist_wheel
            fi
            
            # List dist wheel
            ls -la dist/*.whl

            # Twine check
            echo \"Running twine check\"
            if [ \"\$OS_TYPE\" = \"manylinux\" ]; then
              /opt/python/cp39-cp39/bin/twine check dist/*.whl
            elif [ \"\$OS_TYPE\" = \"musllinux\" ]; then
              python3 -m twine check dist/*.whl
            fi

            # Zip for artifact upload
            echo \"Zipping artifacts\"
            if [ \"\$OS_TYPE\" = \"manylinux\" ]; then
              zip -r dist.zip dist
            elif [ \"\$OS_TYPE\" = \"musllinux\" ]; then
              zip -r dist.zip dist
            fi

            # Test package
            echo \"Testing package installation\"
            if [ \"\$OS_TYPE\" = \"manylinux\" ]; then
              /opt/python/cp39-cp39/bin/pip install --force-reinstall dist/*.whl
              export PATH=/opt/python/cp39-cp39/bin:\$PATH
            elif [ \"\$OS_TYPE\" = \"musllinux\" ]; then
              python3 -m pip install --force-reinstall dist/*.whl --break-system-packages
              export PATH=/usr/bin:\$PATH
            fi
            
            echo 'Running opengrep --version'
            echo '1 == 1' | opengrep -l python -e '\$X == \$X'
            opengrep --version
          "

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os_type }}-${{ matrix.arch }}-wheels
          path: dist/*.whl
